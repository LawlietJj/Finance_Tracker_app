/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package PersonalFinanceTracker;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.data.category.DefaultCategoryDataset;

import javax.swing.*;
import java.awt.*;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Map;
import java.util.function.BiFunction;

public class SummariesPanel extends JPanel {

    private int userId;
    private String title;
    private BiFunction<Integer, String, Map<String, BigDecimal[]>> dataProvider;

    private JComboBox<String> rangeComboBox;
    private DefaultCategoryDataset dataset;
    private ChartPanel chartPanel;

    public SummariesPanel(int userId, String title, String initialRange,
                      BiFunction<Integer, String, Map<String, BigDecimal[]>> dataProvider) {
        
            this.userId = userId;
            this.title = title;
            this.dataProvider = dataProvider;

            setLayout(new BorderLayout(10, 10));
            setBackground(Color.GRAY.brighter());
//            setBackground(new Color(245, 245, 245));
            setPreferredSize(new Dimension(900, 400));

            
            JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 10));
            topPanel.setBackground(Color.WHITE);

            JLabel rangeLabel = new JLabel("View Range:");
            rangeLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            topPanel.add(rangeLabel);

            rangeComboBox = new JComboBox<>(new String[]{"daily", "weekly", "monthly"});
            rangeComboBox.setSelectedItem(initialRange);
            rangeComboBox.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            rangeComboBox.setPreferredSize(new Dimension(140, 32));
            rangeComboBox.setFocusable(false);
            rangeComboBox.setBackground(new Color(245, 245, 245));
            rangeComboBox.setBorder(BorderFactory.createLineBorder(new Color(180, 180, 180)));

            rangeComboBox.addActionListener(e -> updateChart());
            topPanel.add(rangeComboBox);

            add(topPanel, BorderLayout.NORTH);

            // Chart Setup
            dataset = new DefaultCategoryDataset();
            JFreeChart chart = createChart(dataset, title, initialRange);

            chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new Dimension(880, 320));
            chartPanel.setBackground(Color.WHITE);
            chartPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            add(chartPanel, BorderLayout.CENTER);

            // Initial Data Load
            updateChart();
}


    private JFreeChart createChart(DefaultCategoryDataset dataset, String title, String range) {
        JFreeChart chart = ChartFactory.createLineChart(
                title + " Summary (" + capitalize(range) + ")",
                "Period", "Amount",
                dataset
        );

       
        NumberAxis yAxis = (NumberAxis) chart.getCategoryPlot().getRangeAxis();
        NumberFormat numberFormat = NumberFormat.getNumberInstance();
        numberFormat.setMaximumFractionDigits(2);
        yAxis.setNumberFormatOverride(numberFormat);

        return chart;
    }

        public void updateChart() {
            
            String selectedRange = (String) rangeComboBox.getSelectedItem();
            if (selectedRange == null) return;

            Map<String, BigDecimal[]> summaryData = dataProvider.apply(userId, selectedRange);

            // Clear old data
            dataset.clear();

            // Add new data
            for (Map.Entry<String, BigDecimal[]> entry : summaryData.entrySet()) {
                String period = entry.getKey();
                BigDecimal income = entry.getValue()[0];
                BigDecimal expense = entry.getValue()[1];

                dataset.addValue(income, "Income", period);
                dataset.addValue(expense, "Expense", period);
            }

            // Update chart title
            chartPanel.getChart().setTitle(title + " Summary (" + capitalize(selectedRange) + ")");

            // Redraw chart
            chartPanel.repaint();
        }

    private String capitalize(String s) {
        return s == null || s.isEmpty()
                ? s
                : s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
