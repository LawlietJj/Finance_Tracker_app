/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package PersonalFinanceTracker;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author HP ElitePC
 */
public class IncomePanel extends javax.swing.JPanel {
    JLabel incomeLabel,  incomeIcon, income;
    BigDecimal rawIncome;
    Color grey;
     private NotificationPanel notificationPanel;
     private SummariesPanel summariesPanel;
    /**
     * Creates new form IncomePanel
     */
    public IncomePanel() {
        initComponents();
        
                        Font font1 = new Font("Calibri", Font.PLAIN, 15);

            Database db = new Database();
            
           grey = new Color(30,30,30,255);
                Font fonts = new Font("Segeo UI", Font.BOLD, 18);
                Font font2 = new Font("Calibri", Font.BOLD, 28);

        
                incomeLabel =new JLabel(); 
                incomeIcon = new JLabel();
                                // Load the image path
                ImageIcon originalIcon = new ImageIcon("C:\\Users\\HP ElitePC\\Documents\\NetBeansProjects\\PerdonalFinanceTracker\\src\\resources\\wallet_888203.png");

                // Scaling the image 
                Image scaledImage = originalIcon.getImage().getScaledInstance(37, 37, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
        
                totalIncomePanel.setLayout(new BoxLayout(totalIncomePanel, BoxLayout.Y_AXIS));
            totalIncomePanel.setPreferredSize(new Dimension(250, 125));
            totalIncomePanel.setBackground(grey);
                
                
              

            income = new JLabel();
            income.setForeground(Color.GREEN);
            income.setFont(font2);
            income.setAlignmentX(Component.CENTER_ALIGNMENT);
            
            incomeLabel = new JLabel("Total Income");
            incomeLabel.setForeground(Color.WHITE);
            incomeLabel.setFont(fonts);
            incomeLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            
            incomeIcon.setIcon(scaledIcon);
            incomeIcon.setAlignmentX(Component.CENTER_ALIGNMENT);
            
            totalIncomePanel.add(Box.createVerticalGlue());
            totalIncomePanel.add(incomeLabel);
            totalIncomePanel.add(Box.createVerticalStrut(15)); // spacing
            totalIncomePanel.add(incomeIcon); 
            totalIncomePanel.add(Box.createVerticalStrut(15)); // spacing
            totalIncomePanel.add(income);
            totalIncomePanel.add(Box.createVerticalGlue());
                
            
                
        DefaultTableModel incomeTableModel = db.incomeTable();
        jTable1.setModel(incomeTableModel);
        jTable1.setRowHeight(25);
        jTable1.setBackground(Color.GRAY.brighter());
        jTable1.setFont(font1);
        
        this.setBackground(Color.GRAY.brighter());
        
       // Create a NumberFormat for currency or numbers with commas
        NumberFormat nf = NumberFormat.getNumberInstance(new Locale("en", "NG"));
        nf.setMaximumFractionDigits(2); 

        // Create NumberFormatter with that format
        NumberFormatter formatter = new NumberFormatter(nf);
        formatter.setAllowsInvalid(false);  // don't allow invalid chars
        formatter.setOverwriteMode(false);

        
        amountfield.setFormatterFactory(new DefaultFormatterFactory(formatter));
        updateTotalLabel();
    }
    
        
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Category = new javax.swing.JLabel();
        Amount = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        totalIncomePanel = new javax.swing.JPanel();
        categoryBox = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        amountfield = new javax.swing.JFormattedTextField();

        Category.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Category.setText("CATEGORY");

        Amount.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Amount.setText("INCOME AMOUNT");

        date.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        date.setText("DATE");

        addBtn.setBackground(new java.awt.Color(0, 204, 204));
        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        addBtn.setForeground(new java.awt.Color(51, 51, 51));
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(0, 204, 204));
        updateBtn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(51, 51, 51));
        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(0, 204, 204));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(51, 51, 51));
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout totalIncomePanelLayout = new javax.swing.GroupLayout(totalIncomePanel);
        totalIncomePanel.setLayout(totalIncomePanelLayout);
        totalIncomePanelLayout.setHorizontalGroup(
            totalIncomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        totalIncomePanelLayout.setVerticalGroup(
            totalIncomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        categoryBox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        categoryBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Salary", "Gifts", "Investments", "Freelance/Side Hustle", "Refunds/Reimbursements" }));

        jDateChooser1.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N

        amountfield.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(totalIncomePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Category, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(Amount, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amountfield, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Category)
                        .addComponent(Amount)
                        .addComponent(categoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(date)
                        .addComponent(amountfield, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalIncomePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
      Database db = new Database();

        try {
                int userid = Session.userId;
                String Category = categoryBox.getSelectedItem().toString();

                Number value = (Number) amountfield.getValue();
                if (value == null) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid amount.");
                    return;
                }
                BigDecimal Amount = BigDecimal.valueOf(value.doubleValue());

                Date selectedDate = jDateChooser1.getDate();
                if (selectedDate == null) {
                    JOptionPane.showMessageDialog(this, "Please select a date.");
                    return;
                }
                java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());

                if (Category.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill all fields.");
                    return;
                }

                boolean success = db.insertIncome(Category, Amount, sqlDate);

                if (success) {
                    String type = "Income"; 
                    db.insertTransaction(Session.userId, "Income", Category, Amount, sqlDate);

                    JOptionPane.showMessageDialog(this, "Income Added");
                    table_update();
                    updateTotalLabel();
                    summariesPanel.updateChart();

                    
                      String notifMsg = "✅ Income inserted successfully for category: " + Category + 
                              ", Amount: " + Amount + ", Date: " + sqlDate;

                        // Insert notification into DB
                        db.insertNotification(userid, notifMsg);

                        // Show message in UI NotificationPanel if it exists
                        if (notificationPanel != null) {
                             notificationPanel.addNotification(notifMsg, new Color(0, 128, 0));
                        } else {
                            JOptionPane.showMessageDialog(this, notifMsg);
                        }


                    amountfield.setValue(null);  // Clear formatted text field
                    jDateChooser1.setDate(null);
                    categoryBox.requestFocus();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to add the record.");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                ex.printStackTrace();
        }

    }//GEN-LAST:event_addBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        Database db = new Database();
        
        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
                int selectedIndex = jTable1.getSelectedRow();

                if (selectedIndex == -1) {
                    JOptionPane.showMessageDialog(this, "Please select a record to delete.");
                    return;
                }

                int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());

                int dialogResult = JOptionPane.showConfirmDialog(null,
                        "Do you want to delete this record?", "Warning",
                        JOptionPane.YES_NO_OPTION);

                if (dialogResult == JOptionPane.YES_OPTION) {
                    boolean success = db.deleteIncomeRecord(id);

                    if (success) {
                        JOptionPane.showMessageDialog(this, "Income deleted");
                        
                        String notifMsg = "✅ Income Record was Deleted successfully";

                            // Insert notification into DB
                            db.insertNotification(Session.userId, notifMsg);

                            // Show message in UI NotificationPanel if it exists
                            if (notificationPanel != null) {
                                notificationPanel.addNotification(notifMsg, new Color(0, 128, 0));
                            } else {
                                JOptionPane.showMessageDialog(this, notifMsg);
                            }
                        table_update();
                        updateTotalLabel();
                        summariesPanel.updateChart();

                        amountfield.setValue(null);
                        categoryBox.requestFocus();
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete the record.");
                    }
                }            
    }//GEN-LAST:event_deleteBtnActionPerformed
    
    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
       DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();

        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a record to update");
            return;
        }

        try {
            int id = Integer.parseInt(Df.getValueAt(selectedIndex, 0).toString());
            String category = categoryBox.getSelectedItem().toString();
            Number value = (Number) amountfield.getValue();
            if (value == null) {
                JOptionPane.showMessageDialog(this, "Please enter a valid amount.");
                return;
            }
            BigDecimal amount = BigDecimal.valueOf(value.doubleValue());

            Date selectedDate = jDateChooser1.getDate();

            if (category.isEmpty() || selectedDate == null) {
                JOptionPane.showMessageDialog(this, "All fields are required.");
                return;
            }

            java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());

            Database db = new Database();
            boolean success = db.updateIncome(id, category, amount, sqlDate);

            if (success) {
                JOptionPane.showMessageDialog(this, "Record updated successfully!");
                table_update();  // refresh table
                updateTotalLabel();
                summariesPanel.updateChart();

                amountfield.setValue(null);
                jDateChooser1.setDate(null);
                categoryBox.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update record.");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            ex.printStackTrace();
}

    }//GEN-LAST:event_updateBtnActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
         DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
            int selectedIndex = jTable1.getSelectedRow();

            if (selectedIndex != -1) {
                String category = Df.getValueAt(selectedIndex, 1).toString();
                String amount = Df.getValueAt(selectedIndex, 2).toString();
                String date = Df.getValueAt(selectedIndex, 3).toString();

                categoryBox.setSelectedItem(category);   // For JComboBox

                try {
                    BigDecimal amountValue = new BigDecimal(amount.replaceAll(",", ""));
                    amountfield.setValue(amountValue);
                } catch (NumberFormatException e) {
                    amountfield.setText(amount);
                }

                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    Date parsedDate = sdf.parse(date);
                    jDateChooser1.setDate(parsedDate);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
        }

    }//GEN-LAST:event_jTable1MouseClicked

            private void updateTotalLabel() {
             int userId = Session.userId;
                Database db = new Database();


                // Get sum of monthly budgets and update assets budget field
                BigDecimal totalIncome = db.getTotalMonthlyIncome(userId);
                boolean success = db.insertTotalIncome(userId, totalIncome);

                // Now get budget from assets table (to be sure)
                if (success) {
                    rawIncome = db.getIncomeByUserId(userId);
                } else {
                    rawIncome = BigDecimal.ZERO;
                }

                NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("en", "NG"));
                income.setText(currencyFormat.format(rawIncome));
    }
            
              public void setSummariesPanel(SummariesPanel summariesPanel) {
                this.summariesPanel = summariesPanel;
            }
    
     
               public void setNotificationPanel(NotificationPanel notificationPanel) {
                this.notificationPanel = notificationPanel;
            }
    
                private void table_update() {
                    Database db = new Database();
                DefaultTableModel model = db.incomeTable();
                jTable1.setModel(model);
                jTable1.setRowHeight(25);
            }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Amount;
    private javax.swing.JLabel Category;
    private javax.swing.JButton addBtn;
    private javax.swing.JFormattedTextField amountfield;
    private javax.swing.JComboBox<String> categoryBox;
    private javax.swing.JLabel date;
    private javax.swing.JButton deleteBtn;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel totalIncomePanel;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
